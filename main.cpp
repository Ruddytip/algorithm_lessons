#include <iostream>
#include "geek.hpp"

// Task 1
// Реализовать обход в глубину с использованием стека
// Реализованно в файле geek.hpp в классе Graph
// ================================================================================================

// Task 2
// Моделируем робот поисковой системы. Дан готовый простой граф с циклическими связями.
// Нужно обойти этот граф двумя способами и подсчитать количество ссылок на каждый из узлов графа (полустепень захода):
//  - обход графа рекурсивной функцией (с подсчётом только смежных со стартовой вершин)
//  - обход графа по матрице смежности (с подсчётом всех вершин графа)
// В конце обхода вывести два получившихся списка всех узлов в порядке уменьшения количества ссылок на них.
// Реализованно в файле geek.hpp в классе Graph
// ================================================================================================

int main(){
    // Проверка первого задания
    std::cout << "Task 1:\n";
    const int SIZE1 = 9;
    int matrix1[SIZE1][SIZE1] = {
        {0, 1, 1, 1, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0}
    };
    Graph g1(SIZE1, &matrix1[0][0]);
    g1.printDepth();
    std::cout << std::endl;
    // ==========================================

    // Проверка второго задания
    std::cout << "Task 2:\n";
    const int SIZE2 = 8;
    int matrix2[SIZE2][SIZE2] = {
        {0, 1, 0, 0, 0, 0, 1, 1},
        {1, 0, 1, 1, 0, 0, 0, 0},
        {0, 1, 0, 1, 1, 0, 0, 0},
        {0, 1, 1, 0, 1, 1, 1, 1},
        {0, 0, 1, 1, 0, 1, 0, 0},
        {0, 0, 0, 1, 1, 0, 1, 0},
        {1, 0, 0, 1, 0, 1, 0, 1},
        {1, 0, 0, 1, 0, 0, 1, 0}
    };
    Graph g2(SIZE2, &matrix2[0][0]);
    std::cout << "Matrix out:\n";
    g2.printTraversal(0);
    std::cout << "Recur out:\n";
    g2.printTraversal(1);
    // ==========================================
    return 0;
}